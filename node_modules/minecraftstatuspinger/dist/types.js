export class Packet {
    constructor() {
        this.status = {
            handshakeBaked: false,
            pingSent: false,
            pingBaked: false,
            pingSentTime: null,
        };
        this.meta = {
            packetInitialized: false,
            metaCrafted: false,
            fieldsCrafted: false,
            packetID: null,
            dataLength: null,
            fullLength: null,
            metaLength: null,
        };
        this.dataBuffer = Buffer.alloc(0);
        this.fieldsBuffer = Buffer.alloc(0);
        this.crafted = {
            data: null,
            latency: null,
        };
        this.Error = null;
    }
}
export class ServerStatus {
    constructor(statusRaw, latency, throwOnParseError, disableJSONParse) {
        if (!disableJSONParse) {
            try {
                this.status = JSON.parse(statusRaw);
            }
            catch (err) {
                if (throwOnParseError)
                    throw err;
                this.status = null;
            }
        }
        else
            this.status = null;
        this.statusRaw = statusRaw;
        if (latency != null) {
            this.latency = latency;
        }
        else
            this.latency = null;
    }
}
//# sourceMappingURL=types.js.map